@startuml Class Diagram
!theme plain
skinparam backgroundColor #FFFFFF

<<<<<<< HEAD
class CameraManager {
    -camera: Picamera2
    -is_initialized: bool
    -streaming: bool
    -lock: threading.Lock
    +initialize_camera(**settings): bool
    +start_streaming(): bool
    +stop_streaming(): bool
    +get_frame(): np.ndarray
    +get_lores_frame(): np.ndarray
    +update_settings(**settings): bool
    +close(): void
=======
title Class Diagram - AI Camera (LPR)

class CameraHandler {
  - camera_instance : Picamera2
  - frames_queue :FrameQueue
  - metadata_queue : MetadataQueue
  + initialize_camera()
  + generate_frames() : Generator
  + start()
  + stop()
  + release()
  + set_camera_settings()
}
class FrameQueue{
-	queue : Queue 
+	get_frame()
+	put_frame()
}
class MetadataQueue{
-	queue : Queue
+	get_metadata()
+	put_metadata()
}
class DetectionProcessor {
  - vehicle_detection_model
  - lp_detection_model
  - frames_queue :FrameQueue
  + run_detection()
  + detect_vehicle(frame)
  + detect_license_plate(vehicle_frame)
  + preprocess_plate(plate_frame)
  + perform_ocr(preprocessed_frame)
  + save_to_database()
  + track_vehicle()
>>>>>>> 48745e5 (basic camera module complete)
}

class DetectionThread {
    -camera_manager: CameraManager
    -frames_queue: Queue
    -db_manager: DatabaseManager
    -vehicle_model: Any
    -lp_detection_model: Any
    -lp_ocr_model: Any
    -ocr_reader: Any
    -running: bool
    -detection_count: int
    +load_models(): bool
    +detect_vehicles(frame): List[Dict]
    +detect_license_plates(frame, vehicle_boxes): List[Dict]
    +perform_ocr(image): str
    +filter_valid_license_plates(lp_boxes, frame_shape): List[Dict]
    +process_frame(frame): void
    +run(): void
    +stop(): void
}

class DatabaseManager {
    -conn: sqlite3.Connection
    -cursor: sqlite3.Cursor
    -db_lock: threading.Lock
    +connect(): void
    +insert_detection_result(...): void
    +insert_vehicle_detection(...): void
    +get_detection_data_paginated(...): Dict
    +get_detection_by_id(id): Dict
    +get_detection_statistics(): Dict
    +insert_health_check_result(...): void
    +get_health_data_paginated(...): Dict
    +close_connection(): void
}

class HealthMonitor {
    -camera_manager: CameraManager
    -db_manager: DatabaseManager
    -running: bool
    -stop_event: Event
    -monitor_thread: Thread
    +check_camera(): bool
    +check_disk_space(): bool
    +check_cpu_ram(): bool
    +check_detection_models(): bool
    +check_easyocr(): bool
    +check_database(): bool
    +check_network_connectivity(): bool
    +run_all_checks(): Dict
    +start_monitoring(): void
    +stop_monitoring(): void
}

class FlaskApp {
    -app: Flask
    -camera_manager: CameraManager
    -detection_thread: DetectionThread
    -health_monitor: HealthMonitor
    -db_manager: DatabaseManager
    +startup(): bool
    +shutdown(): void
    +video_feed(): Response
    +api_camera_status(): jsonify
    +api_start_camera(): jsonify
    +api_stop_camera(): jsonify
    +api_detection_status(): jsonify
    +api_get_detection_data(): jsonify
    +detection_detail(detection_id): render_template
    +download_image(filename): send_file
}

class ImageProcessing {
    +resize_with_letterbox(image, target_size): Tuple
    +crop_license_plates(image, detections): List[np.ndarray]
    +draw_bounding_boxes(image, detections): np.ndarray
    +preprocess_for_ocr(image): np.ndarray
    +enhance_image_for_detection(image): np.ndarray
    +normalize_image(image): np.ndarray
}

class CameraConfig {
    +DETECTION_RESOLUTION: Tuple
    +VIDEO_FEED_RESOLUTION: Tuple
    +DEFAULT_CAMERA_SETTINGS: Dict
    +get_camera_config(): Dict
    +get_default_settings(): Dict
    +get_detection_resolution(): Tuple
    +get_video_feed_resolution(): Tuple
}

' Relationships
CameraManager ||--o{ DetectionThread : uses
CameraManager ||--o{ HealthMonitor : monitors
DetectionThread ||--o{ DatabaseManager : saves to
DetectionThread ||--o{ ImageProcessing : uses
HealthMonitor ||--o{ DatabaseManager : logs to
FlaskApp ||--o{ CameraManager : controls
FlaskApp ||--o{ DetectionThread : manages
FlaskApp ||--o{ HealthMonitor : monitors
FlaskApp ||--o{ DatabaseManager : queries
DetectionThread ||--o{ CameraConfig : configures

@enduml


