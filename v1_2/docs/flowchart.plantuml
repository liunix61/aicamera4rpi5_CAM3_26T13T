@startuml
title AI Camera (LPR) System Startup Flow

start

:Load config.py;
:load_dotenv(.env.production);

:Configure Logging;
note right
INFO → Terminal
DEBUG → Daily File (rotate @ midnight, keep 30 days)
end note

:Create Queues;
note right
frames_queue = Queue(maxsize=10)
metadata_queue = Queue(maxsize=1)
end note

:Create db_lock = threading.Lock();

:Initialize CameraHandler;
:Initialize DatabaseManager;
:Initialize DetectionProcessor;
:Initialize WebSocketClient;
:Initialize HealthMonitor;

:Create Threads;
note right
- camera_thread
- object_detection_thread
- sender_thread
- healthmonitor_thread
- metadata_thread
end note

:CameraHandler.initialize_camera();
:DetectionProcessor.load_model();
:HealthMonitor.run_all_checks();

if (System Healthy?) then (yes)
  :Start All Threads;
else (no)
  :Log Error to Terminal;
  stop
endif

fork
  :Thread 1: Camera → capture frame + metadata → frames_queue, metadata_queue;
fork again
  :Thread 2: Video Feed → Stream to Flask App;
fork again
  :Thread 3: Metadata → metadata_queue → SocketIO → Flask UI;
fork again
  :Thread 4: Detection → frames_queue → Detect → OCR → Save to DB;
fork again
  :Thread 5: HealthMonitor → periodic checks → Save to DB;
fork again
  :Thread 6: WebSocket Sender → Send unsent data to LPR Server;
end fork

group User Commands via Web UI
  alt Toggle Camera or Reset
    :Stop Detection & HealthMonitor;
    :Close Camera;
    :Reopen Camera;
    :Restart Detection & HealthMonitor;
  else Change Camera Parameters
    :Stop Detection & HealthMonitor;
    :Close Camera;
    :Apply new controls;
    :Reopen Camera;
    :Restart Detection & HealthMonitor;
  else Stop All Threads
    :Stop sender → healthmonitor → detection → video feed → camera;
    :Wait for restart command;
  else Start All Threads
    :Check if threads running;
    :Stop if needed;
    :Start sender → healthmonitor → detection → video feed → camera;
  else Shutdown System
    :Stop All Threads;
    :Release resources;
    stop
  end
end group
@enduml